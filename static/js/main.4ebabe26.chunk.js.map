{"version":3,"sources":["redux/reducers/counter.js","redux/reducers/isLogged.js","redux/reducers/index.js","redux/index.js","context/context.js","context/CounterProvider.js","context/Counter2Provider.js","components/ReduxOldWay.js","redux/actions/index.js","components/ReduxNewWay.js","components/ReactContext.js","profile.js","App.js","index.js"],"names":["counterReducer","state","action","type","isLoggedReducer","rootReducer","combineReducers","count","isLogged","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReduxContext","children","AppContext","createContext","CounterProvider","useState","counter","setCounter","Provider","value","increment","c","decrement","Counter2Provider","connect","dispatch","onClick","ReduxNewWay","useSelector","useDispatch","ReactContext","subtitle","useContext","queue","setInterval","length","Promise","resolve","queueToSend","console","info","onRenderCallback","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","push","App","onRender","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ebabe26.chunk.js","sourcesContent":["const counterReducer = (state = 0, action) => {\r\n  switch(action.type) {\r\n    case 'INCREMENT':\r\n      return state + 1;\r\n      case 'DECREMENT':\r\n        return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default counterReducer;","const isLoggedReducer = (state = false, action) => {\r\n  switch(action.type) {\r\n    case 'SIGN_IN':\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default isLoggedReducer;","import { combineReducers } from 'redux';\r\nimport counterReducer from './counter';\r\nimport isLoggedReducer from './isLogged';\r\n\r\nconst rootReducer = combineReducers({\r\n  count: counterReducer,\r\n  isLogged: isLoggedReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport const ReduxContext = ({children}) => {\r\n  return (\r\n    <Provider store={store}>\r\n      {children}\r\n    </Provider>\r\n  );\r\n}","import { createContext } from 'react';\r\n\r\nexport const AppContext = createContext();","import { useState } from 'react';\r\nimport { AppContext } from './context'\r\n\r\nconst CounterProvider = ({children}) => {\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCounter(c => c+1);\r\n  }\r\n\r\n  const decrement = () => {\r\n    setCounter(c => c-1);\r\n  }\r\n\r\n  return(\r\n    <AppContext.Provider value={{counter, increment, decrement}}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default CounterProvider;","import { useState } from 'react';\r\nimport { AppContext } from './context'\r\n\r\nconst Counter2Provider = ({children}) => {\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCounter(c => c+1);\r\n  }\r\n\r\n  const decrement = () => {\r\n    setCounter(c => c-1);\r\n  }\r\n\r\n  return(\r\n    <AppContext.Provider value={{counter, increment, decrement}}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Counter2Provider;","import { connect } from 'react-redux';\r\nimport { increment, decrement } from '../redux/actions'\r\n\r\nfunction ReduxOldWay({count, increment, decrement}) {\r\n  return(\r\n    <div>\r\n      <h1>Redux Old Way</h1>\r\n      <h3>Connecting the componente using Redux connect, mapStateToProps and mapDispatchToProps</h3>\r\n      <p>Counter: {count}</p>\r\n      <button onClick={() => increment()}>+</button>\r\n      <button onClick={() => decrement()}>-</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { count } = state;\r\n  return { count };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    increment: () => dispatch(increment()),\r\n    decrement: () => dispatch(decrement())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxOldWay);","export const increment = () => {\r\n  return {\r\n    type: 'INCREMENT'\r\n  }\r\n}\r\n\r\nexport const decrement = () => {\r\n  return {\r\n    type: 'DECREMENT'\r\n  }\r\n} ","import { useSelector, useDispatch } from 'react-redux';\r\nimport { increment, decrement } from '../redux/actions'\r\n\r\nfunction ReduxNewWay() {\r\n  const count = useSelector(state => state.count);\r\n  const dispatch = useDispatch();\r\n\r\n  return(\r\n    <div>\r\n      <h1>Redux New Way</h1>\r\n      <h3>Using Redux useSelector and useDispatch hooks</h3>\r\n      <p>Counter: {count}</p>\r\n      <button onClick={() => dispatch(increment())}>+</button>\r\n      <button onClick={() => dispatch(decrement())}>-</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReduxNewWay;","import { useContext } from 'react';\r\nimport { AppContext } from '../context'\r\n\r\nfunction ReactContext({subtitle}) {\r\n  const { counter, increment, decrement } = useContext(AppContext);\r\n\r\n  return(\r\n    <div>\r\n      <h1>React Context</h1>\r\n      <h3>{subtitle}</h3>\r\n      <p>Counter: {counter}</p>\r\n      <button onClick={() => increment() }>+</button>\r\n      <button onClick={() => decrement() }>-</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReactContext;","let queue = []\r\n\r\n// sendProfileQueue every 5 seconds\r\nsetInterval(sendProfileQueue, 5000)\r\n\r\nexport const onRenderCallback = (\r\n  id,\r\n  phase,\r\n  actualDuration,\r\n  baseDuration,\r\n  startTime,\r\n  commitTime,\r\n  interactions,\r\n) => {\r\n  queue.push({\r\n    id,\r\n    phase,\r\n    actualDuration,\r\n    baseDuration,\r\n    startTime,\r\n    commitTime,\r\n    interactions,\r\n  })\r\n}\r\n\r\nfunction sendProfileQueue() {\r\n  if (!queue.length) {\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const queueToSend = [...queue];\r\n  queue = [];\r\n\r\n  // here's where we'd actually make the server call to send the queueToSend\r\n  // data to our backend...\r\n  console.info('sending profile queue', queueToSend)\r\n\r\n  return Promise.resolve()\r\n}","import './App.css';\r\n\r\nimport { Profiler } from 'react';\r\nimport { ReduxContext } from './redux';\r\nimport { CounterProvider, Counter2Provider } from './context'\r\n\r\nimport ReduxOldWay from './components/ReduxOldWay';\r\nimport ReduxNewWay from './components/ReduxNewWay';\r\nimport ReactContext from './components/ReactContext';\r\n\r\nimport { onRenderCallback } from './profile';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Profiler id=\"root\" onRender={onRenderCallback}>\r\n      <div className=\"App\">\r\n        <ReduxContext>\r\n          <ReduxOldWay />\r\n          <ReduxNewWay />\r\n        </ReduxContext>\r\n        <CounterProvider>\r\n          <ReactContext subtitle={\"Getting the state using useContext hook\"} />\r\n        </CounterProvider>\r\n        <Counter2Provider>\r\n          <ReactContext subtitle={\"Using a different Provider and a different counter\"} />\r\n        </Counter2Provider>\r\n      </div>\r\n    </Profiler>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}